<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liucl.test.dao.ActcompanyMapper" >
  <resultMap id="BaseResultMap" type="com.liucl.test.domain.Actcompany" >
    <id column="ID" property="ID" jdbcType="INTEGER" />
    <result column="companyID" property="companyID" jdbcType="INTEGER" />
    <result column="moduleID" property="moduleID" jdbcType="INTEGER" />
    <result column="billName" property="billName" jdbcType="VARCHAR" />
    <result column="billTable" property="billTable" jdbcType="VARCHAR" />
    <result column="activitiID" property="activitiID" jdbcType="VARCHAR" />
    <result column="activitiZJ" property="activitiZJ" jdbcType="VARCHAR" />
    <result column="konde" property="konde" jdbcType="INTEGER" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="des" property="des" jdbcType="VARCHAR" />
    <result column="valid" property="valid" jdbcType="TINYINT" />
    <result column="version" property="version" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.liucl.test.domain.Actcompany" extends="BaseResultMap" >
    <result column="activitiJSON" property="activitiJSON" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, companyID, moduleID, billName, billTable, activitiID, activitiZJ, konde, createTime, 
    des, valid, version
  </sql>
  <sql id="Blob_Column_List" >
    activitiJSON
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.liucl.test.domain.ActcompanyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from actcompany
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitClause != null" >
      limit ${limitClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.liucl.test.domain.ActcompanyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from actcompany
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitClause != null" >
      limit ${limitClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from actcompany
    where ID = #{ID,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from actcompany
    where ID = #{ID,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.liucl.test.domain.ActcompanyExample" >
    delete from actcompany
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.liucl.test.domain.Actcompany" >
    <selectKey resultType="java.lang.Integer" keyProperty="ID" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into actcompany (companyID, moduleID, billName, 
      billTable, activitiID, activitiZJ, 
      konde, createTime, des, 
      valid, version, activitiJSON
      )
    values (#{companyID,jdbcType=INTEGER}, #{moduleID,jdbcType=INTEGER}, #{billName,jdbcType=VARCHAR}, 
      #{billTable,jdbcType=VARCHAR}, #{activitiID,jdbcType=VARCHAR}, #{activitiZJ,jdbcType=VARCHAR}, 
      #{konde,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{des,jdbcType=VARCHAR}, 
      #{valid,jdbcType=TINYINT}, #{version,jdbcType=INTEGER}, #{activitiJSON,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.liucl.test.domain.Actcompany" >
    <selectKey resultType="java.lang.Integer" keyProperty="ID" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into actcompany
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="companyID != null" >
        companyID,
      </if>
      <if test="moduleID != null" >
        moduleID,
      </if>
      <if test="billName != null" >
        billName,
      </if>
      <if test="billTable != null" >
        billTable,
      </if>
      <if test="activitiID != null" >
        activitiID,
      </if>
      <if test="activitiZJ != null" >
        activitiZJ,
      </if>
      <if test="konde != null" >
        konde,
      </if>
      <if test="createTime != null" >
        createTime,
      </if>
      <if test="des != null" >
        des,
      </if>
      <if test="valid != null" >
        valid,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="activitiJSON != null" >
        activitiJSON,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="companyID != null" >
        #{companyID,jdbcType=INTEGER},
      </if>
      <if test="moduleID != null" >
        #{moduleID,jdbcType=INTEGER},
      </if>
      <if test="billName != null" >
        #{billName,jdbcType=VARCHAR},
      </if>
      <if test="billTable != null" >
        #{billTable,jdbcType=VARCHAR},
      </if>
      <if test="activitiID != null" >
        #{activitiID,jdbcType=VARCHAR},
      </if>
      <if test="activitiZJ != null" >
        #{activitiZJ,jdbcType=VARCHAR},
      </if>
      <if test="konde != null" >
        #{konde,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="des != null" >
        #{des,jdbcType=VARCHAR},
      </if>
      <if test="valid != null" >
        #{valid,jdbcType=TINYINT},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
      <if test="activitiJSON != null" >
        #{activitiJSON,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.liucl.test.domain.ActcompanyExample" resultType="java.lang.Integer" >
    select count(*) from actcompany
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update actcompany
    <set >
      <if test="record.ID != null" >
        ID = #{record.ID,jdbcType=INTEGER},
      </if>
      <if test="record.companyID != null" >
        companyID = #{record.companyID,jdbcType=INTEGER},
      </if>
      <if test="record.moduleID != null" >
        moduleID = #{record.moduleID,jdbcType=INTEGER},
      </if>
      <if test="record.billName != null" >
        billName = #{record.billName,jdbcType=VARCHAR},
      </if>
      <if test="record.billTable != null" >
        billTable = #{record.billTable,jdbcType=VARCHAR},
      </if>
      <if test="record.activitiID != null" >
        activitiID = #{record.activitiID,jdbcType=VARCHAR},
      </if>
      <if test="record.activitiZJ != null" >
        activitiZJ = #{record.activitiZJ,jdbcType=VARCHAR},
      </if>
      <if test="record.konde != null" >
        konde = #{record.konde,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.des != null" >
        des = #{record.des,jdbcType=VARCHAR},
      </if>
      <if test="record.valid != null" >
        valid = #{record.valid,jdbcType=TINYINT},
      </if>
      <if test="record.version != null" >
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.activitiJSON != null" >
        activitiJSON = #{record.activitiJSON,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update actcompany
    set ID = #{record.ID,jdbcType=INTEGER},
      companyID = #{record.companyID,jdbcType=INTEGER},
      moduleID = #{record.moduleID,jdbcType=INTEGER},
      billName = #{record.billName,jdbcType=VARCHAR},
      billTable = #{record.billTable,jdbcType=VARCHAR},
      activitiID = #{record.activitiID,jdbcType=VARCHAR},
      activitiZJ = #{record.activitiZJ,jdbcType=VARCHAR},
      konde = #{record.konde,jdbcType=INTEGER},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      des = #{record.des,jdbcType=VARCHAR},
      valid = #{record.valid,jdbcType=TINYINT},
      version = #{record.version,jdbcType=INTEGER},
      activitiJSON = #{record.activitiJSON,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update actcompany
    set ID = #{record.ID,jdbcType=INTEGER},
      companyID = #{record.companyID,jdbcType=INTEGER},
      moduleID = #{record.moduleID,jdbcType=INTEGER},
      billName = #{record.billName,jdbcType=VARCHAR},
      billTable = #{record.billTable,jdbcType=VARCHAR},
      activitiID = #{record.activitiID,jdbcType=VARCHAR},
      activitiZJ = #{record.activitiZJ,jdbcType=VARCHAR},
      konde = #{record.konde,jdbcType=INTEGER},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      des = #{record.des,jdbcType=VARCHAR},
      valid = #{record.valid,jdbcType=TINYINT},
      version = #{record.version,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.liucl.test.domain.Actcompany" >
    update actcompany
    <set >
      <if test="companyID != null" >
        companyID = #{companyID,jdbcType=INTEGER},
      </if>
      <if test="moduleID != null" >
        moduleID = #{moduleID,jdbcType=INTEGER},
      </if>
      <if test="billName != null" >
        billName = #{billName,jdbcType=VARCHAR},
      </if>
      <if test="billTable != null" >
        billTable = #{billTable,jdbcType=VARCHAR},
      </if>
      <if test="activitiID != null" >
        activitiID = #{activitiID,jdbcType=VARCHAR},
      </if>
      <if test="activitiZJ != null" >
        activitiZJ = #{activitiZJ,jdbcType=VARCHAR},
      </if>
      <if test="konde != null" >
        konde = #{konde,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="des != null" >
        des = #{des,jdbcType=VARCHAR},
      </if>
      <if test="valid != null" >
        valid = #{valid,jdbcType=TINYINT},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="activitiJSON != null" >
        activitiJSON = #{activitiJSON,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where ID = #{ID,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.liucl.test.domain.Actcompany" >
    update actcompany
    set companyID = #{companyID,jdbcType=INTEGER},
      moduleID = #{moduleID,jdbcType=INTEGER},
      billName = #{billName,jdbcType=VARCHAR},
      billTable = #{billTable,jdbcType=VARCHAR},
      activitiID = #{activitiID,jdbcType=VARCHAR},
      activitiZJ = #{activitiZJ,jdbcType=VARCHAR},
      konde = #{konde,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      des = #{des,jdbcType=VARCHAR},
      valid = #{valid,jdbcType=TINYINT},
      version = #{version,jdbcType=INTEGER},
      activitiJSON = #{activitiJSON,jdbcType=LONGVARCHAR}
    where ID = #{ID,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liucl.test.domain.Actcompany" >
    update actcompany
    set companyID = #{companyID,jdbcType=INTEGER},
      moduleID = #{moduleID,jdbcType=INTEGER},
      billName = #{billName,jdbcType=VARCHAR},
      billTable = #{billTable,jdbcType=VARCHAR},
      activitiID = #{activitiID,jdbcType=VARCHAR},
      activitiZJ = #{activitiZJ,jdbcType=VARCHAR},
      konde = #{konde,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      des = #{des,jdbcType=VARCHAR},
      valid = #{valid,jdbcType=TINYINT},
      version = #{version,jdbcType=INTEGER}
    where ID = #{ID,jdbcType=INTEGER}
  </update>
</mapper>